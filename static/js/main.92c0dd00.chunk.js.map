{"version":3,"sources":["Sound.jsx","Sound.hooks.js","Sounds.context.js","Sounds.jsx","Sounds.hooks.js","App.jsx","Sounds.provider.js","serviceWorker.js","index.jsx"],"names":["Sound","file","title","playPause","audio","useMemo","Audio","useState","playing","setPlaying","addEventListener","currentTime","duration","play","useAudio","onClick","SoundsContext","createContext","Sounds","useContext","sounds","map","sound","key","App","className","SoundsProvider","children","setSounds","useEffect","fetch","then","res","json","catch","console","error","value","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sQAIO,SAASA,EAAT,GAAiC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACpBC,ECHH,SAAkBF,GACvB,IAAMG,EAAQC,mBAAQ,kBAAM,IAAIC,MAAJ,kBAAqBL,MAAS,CAACA,IAD9B,EAECM,oBAAS,GAFV,mBAEtBC,EAFsB,KAEbC,EAFa,KAO7B,OAHAL,EAAMM,iBAAiB,QAAQ,kBAAMD,GAAW,MAChDL,EAAMM,iBAAiB,SAAS,kBAAMD,GAAW,MAE1C,CACLN,UADK,WAECK,EACFJ,EAAMO,YAAcP,EAAMQ,SAI5BR,EAAMS,SDXYC,CAASb,GAAvBE,UAER,OAAO,4BAAQY,QAASZ,GAAYD,GEL/B,IAAMc,EAAgBC,wBAAc,ICGpC,SAASC,IAGd,OCHOC,qBAAWH,GAAeI,ODGnBC,KAAI,SAAAC,GAAK,OAAI,kBAACtB,EAAD,eAAOuB,IAAKD,EAAMrB,MAAUqB,O,MEFlD,SAASE,IACd,OACE,yBAAKC,UAAU,OACb,kBAACP,EAAD,OCLC,SAASQ,EAAT,GAAuC,IAAbC,EAAY,EAAZA,SAAY,EACfpB,mBAAS,IADM,mBACpCa,EADoC,KAC5BQ,EAD4B,KAG3CC,qBAAU,WACRC,MAAM,uBACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,KAAKH,GACLM,MAAMC,QAAQC,SAChB,IAEH,IAAMC,EAAQhC,mBAAQ,WACpB,MAAO,CACLe,YAEF,CAACA,IAEH,OACE,kBAACJ,EAAcsB,SAAf,CAAwBD,MAAOA,GAC5BV,GCVaY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACpB,EAAD,KACE,kBAAC,EAAD,QAGJqB,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAE,GACLD,QAAQC,MAAMA,EAAMkB,c","file":"static/js/main.92c0dd00.chunk.js","sourcesContent":["import React from 'react'\n\nimport { useAudio } from './Sound.hooks'\n\nexport function Sound({ file, title }) {\n  const { playPause } = useAudio(file)\n  \n  return <button onClick={playPause}>{title}</button>\n}\n","import { useMemo, useState } from \"react\"\n\nexport function useAudio(file) {\n  const audio = useMemo(() => new Audio(`/sounds/${file}`), [file])\n  const [playing, setPlaying] = useState(false)\n  \n  audio.addEventListener('play', () => setPlaying(true))\n  audio.addEventListener('ended', () => setPlaying(false))\n  \n  return {\n    playPause() {\n      if (playing) {\n        audio.currentTime = audio.duration\n        return\n      }\n  \n      audio.play()\n    }\n  }\n}","import { createContext } from \"react\"\n\nexport const SoundsContext = createContext({})\n","import React from 'react'\nimport { Sound } from './Sound'\n\nimport { useSounds } from './Sounds.hooks'\n\nexport function Sounds() {\n  const sounds = useSounds()\n  \n  return sounds.map(sound => <Sound key={sound.file} {...sound}/>)\n}\n\n","import { useContext } from \"react\"\n\nimport { SoundsContext } from \"./Sounds.context\"\n\nexport function useSounds() {\n  return useContext(SoundsContext).sounds\n}","import React from 'react'\n\nimport { Sounds } from './Sounds'\n\nimport './App.css'\n\nexport function App() {\n  return (\n    <div className=\"app\">\n      <Sounds />\n    </div>\n  )\n}\n","import React, { useEffect, useMemo, useState } from 'react'\n\nimport { SoundsContext } from \"./Sounds.context\"\n\nexport function SoundsProvider({ children }) {\n  const [sounds, setSounds] = useState([])\n\n  useEffect(() => {\n    fetch('/sounds/sounds.json')\n      .then(res => res.json())\n      .then(setSounds)\n      .catch(console.error)\n  }, [])\n  \n  const value = useMemo(() => {\n    return {\n      sounds,\n    }\n  },[sounds])\n\n  return (\n    <SoundsContext.Provider value={value}>\n      {children}\n    </SoundsContext.Provider>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport { SoundsProvider } from './Sounds.provider'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <SoundsProvider>\n      <App />\n    </SoundsProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}