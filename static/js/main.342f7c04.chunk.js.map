{"version":3,"sources":["Sounds.context.js","Sounds.hooks.js","Sound.jsx","Sound.hooks.js","Sounds.jsx","App.jsx","Sounds.provider.js","serviceWorker.js","index.jsx"],"names":["SoundsContext","createContext","useCharacters","useContext","characters","Sound","file","title","audio","useMemo","Audio","rythm","useRef","useState","playing","setPlaying","rythmClassName","replace","onPlay","useCallback","current","Rythm","connectExternalAudioElement","addRythm","min","max","start","onEnded","stop","useEffect","addEventListener","removeEventListener","playStop","currentTime","duration","play","useAudio","character","name","c","find","console","log","useCharacter","onClick","className","src","alt","height","Sounds","sounds","books","characterFilter","setCharacterFilter","episodeFilter","setEpisodeFilter","filteredSounds","filter","sound","includes","episode","key","onChange","e","target","value","map","book","label","episodes","App","SoundsProvider","children","rawSounds","setRawSounds","rawCharacters","setRawCharacters","fetch","then","res","json","catch","error","extendSound","sort","sound1","sound2","localeCompare","Array","from","Set","flatMap","rawCharacter","Map","values","episode1","episode2","booksMap","book1","book2","forEach","get","push","Provider","parsedEpisode","exec","split","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.342f7c04.chunk.js","sourcesContent":["import { createContext } from \"react\"\n\nexport const SoundsContext = createContext({})\n","import { useContext } from \"react\"\n\nimport { SoundsContext } from \"./Sounds.context\"\n\nexport function useSounds() {\n  return useContext(SoundsContext).sounds\n}\n\nexport function useCharacters() {\n  return useContext(SoundsContext).characters\n}\n\nexport function useBooks() {\n  return useContext(SoundsContext).books\n}\n","import React from 'react'\n\nimport { useAudio, useCharacter } from './Sound.hooks'\nimport './Sound.css'\n\nexport function Sound({ file, title , characters }) {\n  const { playStop, rythmClassName } = useAudio(file)\n  const character = useCharacter(characters[0])\n  \n  return (\n    <button onClick={playStop} className=\"sound\">\n      {character.file && <img src={`characters/${character.file}`} alt=\"Personnage\" className={rythmClassName} height=\"50\" />}\n      {title}\n    </button>\n  )\n}\n","import { useCallback, useEffect, useMemo, useRef, useState } from \"react\"\nimport Rythm from 'rythm.js'\n\nimport { useCharacters } from \"./Sounds.hooks\"\n\nexport function useAudio(file) {\n  const audio = useMemo(() => new Audio(`sounds/${file}`), [file])\n  const rythm = useRef()\n  const [playing, setPlaying] = useState(false)\n\n  const rythmClassName = `rythm-${file.replace(/\\./g, '-')}`\n\n  const onPlay = useCallback(() => {\n    setPlaying(true)\n    if (!rythm.current) {\n      rythm.current = new Rythm()\n      rythm.current.connectExternalAudioElement(audio)\n      rythm.current.addRythm(rythmClassName, 'pulse', 150, 40, { min: 1, max: 1.5 })\n    }\n    rythm.current.start()\n  }, [audio, rythmClassName])\n\n  const onEnded = useCallback(() => {\n    setPlaying(false)\n    rythm.current.stop()\n  }, [])\n  \n  useEffect(() => {\n    audio.addEventListener('play', onPlay)\n    audio.addEventListener('ended', onEnded)\n    return () => {\n      audio.removeEventListener('play', onPlay)\n      audio.removeEventListener('ended', onEnded)\n    }\n  }, [audio, onEnded, onPlay])\n\n  const playStop = useCallback(() => {\n    if (playing) {\n      audio.currentTime = audio.duration\n      return\n    }\n    audio.play()\n  }, [audio, playing])\n\n  return {\n    rythmClassName,\n    playStop,\n  }\n}\n\nexport function useCharacter(name) {\n  const characters = useCharacters()\n\n  return useMemo(() => {\n    const c = characters.find(character => character.name === name)\n    if (!c) console.log(name)\n    return c\n  }, [characters, name])\n}","import React, { useMemo, useState } from 'react'\nimport { Sound } from './Sound'\n\nimport { useBooks, useCharacters, useSounds } from './Sounds.hooks'\n\nexport function Sounds() {\n  const characters = useCharacters()\n  const sounds = useSounds()\n  const books = useBooks()\n\n  const [characterFilter, setCharacterFilter] = useState()\n  const [episodeFilter, setEpisodeFilter] = useState()\n\n  const filteredSounds = useMemo(() => sounds.filter(sound => {\n    if (characterFilter && !sound.characters.includes(characterFilter)) return false\n    if (episodeFilter && !(sound.episode.key === episodeFilter)) return false\n    return true\n  }), [episodeFilter, characterFilter, sounds])\n  \n  return (\n    <>\n      <div>\n        <select onChange={e => setCharacterFilter(e.target.value)}>\n          <option></option>\n          {characters.map(character => <option key={character.name} value={character.name}>{character.name}</option>)}\n        </select>\n        <select onChange={e => setEpisodeFilter(e.target.value)}>\n          <option></option>\n          {books.map(book => (\n            <optgroup key={book.title} label={book.title}>\n              {book.episodes.map(episode => <option key={episode.key} value={episode.key}>{episode.title}</option>)}\n            </optgroup>\n          ))}\n        </select>\n      </div>\n      <div>\n        {filteredSounds.map(sound => <Sound key={sound.file} {...sound}/>)}\n      </div>\n    </>\n  )\n}\n","import React from 'react'\n\nimport { Sounds } from './Sounds'\n\nimport './App.css'\n\nexport function App() {\n  return (\n    <div className=\"app\">\n      <Sounds />\n    </div>\n  )\n}\n","import React, { useEffect, useMemo, useState } from 'react'\n\nimport { SoundsContext } from \"./Sounds.context\"\n\nexport function SoundsProvider({ children }) {\n  const [rawSounds, setRawSounds] = useState([])\n  const [rawCharacters, setRawCharacters] = useState([])\n\n  useEffect(() => {\n    fetch('sounds/sounds.json')\n      .then(res => res.json())\n      .then(setRawSounds)\n      .catch(console.error)\n  }, [])\n\n  useEffect(() => {\n    fetch('characters/characters.json')\n      .then(res => res.json())\n      .then(setRawCharacters)\n      .catch(console.error)\n  }, [])\n\n  const value = useMemo(() => {\n    const sounds = rawSounds.map(extendSound).sort((sound1, sound2) => sound1.title.localeCompare(sound2.title))\n    const characters = Array.from(new Set(sounds.flatMap(sound => sound.characters))).sort().map(character => rawCharacters.find(rawCharacter => rawCharacter.name === character) ?? { name: character })\n    const episodes = Array.from(new Map(sounds.map(sound => [sound.episode.key, sound.episode])).values()).sort((episode1, episode2) => episode1.key.localeCompare(episode2.key))\n    const booksMap = new Map(episodes.map(episode => [episode.book, { title: episode.book, episodes: [] }]))\n    const books = Array.from(booksMap.values()).sort((book1, book2) => book1.title.localeCompare(book2.title))\n    episodes.forEach(episode => booksMap.get(episode.book).episodes.push(episode))\n\n    return {\n      sounds,\n      characters,\n      episodes,\n      books,\n    }\n  }, [rawCharacters, rawSounds])\n\n  return (\n    <SoundsContext.Provider value={value}>\n      {children}\n    </SoundsContext.Provider>\n  )\n}\n\nfunction extendSound(sound) {\n  const parsedEpisode = /^(Livre (\\w+)),? ((\\d+) - .+)$/.exec(sound.episode)\n  const episode = parsedEpisode\n    ? { key: `${parsedEpisode[2]}_${parsedEpisode[4]}`, book: parsedEpisode[1], title: parsedEpisode[3] }\n    : { key: sound.episode, book: sound.episode, title: sound.episode }\n\n  return {\n    ...sound,\n    characters: sound.character.split(' - '),\n    episode,\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport { SoundsProvider } from './Sounds.provider'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <SoundsProvider>\n      <App />\n    </SoundsProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}